env TZ=UTC;

user  nginx;
worker_processes 32;

# Maximum number of open files per worker process.
# Should be > worker_connections.
# Default: no limit
# https://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile
worker_rlimit_nofile 65536;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections 8192;
}


http {

    # Prevent Nginx from sending its version number in the "Server" response header.
    #
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens
    server_tokens off;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    access_log /var/log/nginx/access.log combined buffer=256k flush=10s;

    # Speed up file transfers by using `sendfile()` to copy directly between
    # descriptors rather than using `read()`/`write()``.
    # For performance reasons, on FreeBSD systems w/ ZFS this option should be
    # disabled as ZFS's ARC caches frequently used files in RAM by default.
    # Default: off
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile
    sendfile        on;

    # Don't send out partial frames; this increases throughput since TCP frames
    # are filled up before being sent out.
    # Default: off
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nopush
    tcp_nopush     on;

    # How long to allow each connection to stay idle.
    # Longer values are better for each individual client, particularly for SSL,
    # but means that worker connections are tied up longer.
    # Default: 75s
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
    keepalive_timeout  65;

    # https://nginx.org/en/docs/http/ngx_http_gzip_module.html
    # Enable gzip compression.
    # Default: off
    gzip on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and CPU usage, offering about 75%
    # reduction for most ASCII files (almost identical to level 9).
    # Default: 1
    gzip_comp_level 5;

    # Don't compress anything that's already small and unlikely to shrink much if at
    # all (the default is 20 bytes, which is bad as that usually leads to larger
    # files after gzipping).
    # Default: 20
    gzip_min_length 256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    # Default: off
    gzip_proxied any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    # Default: off
    gzip_vary on;

    # Compress all output labeled with one of the following MIME-types.
    # `text/html` is always compressed by gzip module.
    # Default: text/html
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/vnd.ms-fontobject
        application/wasm
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/bmp
        image/svg+xml
        text/cache-manifest
        text/calendar
        text/css
        text/javascript
        text/markdown
        text/plain
        text/xml
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;


    upstream app_server {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response

        # for UNIX domain socket setups
        server web:3000 fail_timeout=0;
    }

    # Define a map based on the Authorization header
    map $http_authorization $limit_auth_key {
        default $http_authorization;
    }

    # Define rate limiting zone
    # This example limits requests to 1 request per second
    limit_req_zone $limit_auth_key zone=authlimit:10m rate=100r/m;

    server {
        client_max_body_size 50M;
        fastcgi_read_timeout 300;
        proxy_read_timeout 300;

        listen 80;

        location /metrics {
            allow 10.132.0.0/20;
            deny all;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_buffering off;

            proxy_pass http://app_server;
        }

        location /metrics-app {
            allow 10.132.0.0/20;
            deny all;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_buffering off;

            proxy_pass http://app_server;
        }

        location /nginx_status {
            stub_status on;
            access_log on;
        }

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_buffering off;

            proxy_pass http://app_server;
        }

        error_log /usr/share/nginx/error.log;
        access_log /usr/share/nginx/access.log combined buffer=256k flush=10s;

        error_page 500 /500.json;
        location /500.json{
            internal;
            return 500 '{"error": {"status_code": 500, "code": "internal_server_error", "message": "The request could not be completed due to an internal server error."}}';
        }

        error_page 502 /502.json;
        location /502.json{
            internal;
            return 502 '{"error": {"status_code": 502, "code": "bad_gateway", "message": "The request could not be completed due to the server receiving an invalid response from an inbound server it accessed while attempting to fulfill the request."}}';
        }

        error_page 503 /503.json;
        location /503.json{
            internal;
            return 503 '{"error": {"status_code": 503, "code": "service_unavailable", "message": "Service is temporarily unavailable. Please try again after some time."}}';
        }

        error_page 400 /400.json;
        location /400.json{
            internal;
            return 400 '{"error": {"status_code": 400, "code": "bad_request", "message": "The server was unable to process the request sent by the client due to invalid syntax."}}';
        }

        error_page 404 /404.json;
        location /404.json{
            internal;
            return 404 '{"error": {"status_code": 404, "code": "not_found", "message": "Not found."}}';
        }

        error_page 429 /429.json;
        location /429.json{
            internal;
            return 429 '{"error": {"status_code": 429, "code": "rate_limited", "message": "Rate limited - maximum of 20 requests per minute is allowed."}}';
        }
    }

}
